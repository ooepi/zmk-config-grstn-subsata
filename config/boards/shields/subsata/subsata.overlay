#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zephyr,display = &oled;
        zmk,kscan = &default_kscan;
        zmk,matrix_transform = &default_transform;
        zmk,underglow = &led_strip;
    };

    encoder_1: encoder_1 {
        compatible = "alps,ec11";
        a-gpios = <&pro_micro 9 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 8 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <80>;
        status = "okay";

        sensors: sensors {
            compatible = "zmk,keymap-sensors";
            sensors = <&encoder_1>;
            triggers-per-rotation = <20>;
        };
    };

    led_strip: ws2812 {
        compatible = "worldsemi,ws2812-gpio";
        label = "SK6812";

        // Choose an available GPIO pin for data
        chain-length = <1>;    // Number of LEDs
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
        
        // Pick an available GPIO pin
        gpios = <&pro_micro 3 GPIO_ACTIVE_HIGH>;
    };

    gpio_keys: gpio_keys {
        compatible = "gpio-keys";
        sr_key1: sr_key1 {
            gpios = <&shift_reg 0 (GPIO_ACTIVE_HIGH)>;
            label = "SR Key 1";
        };
    };

    default_kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";

        row-gpios
            = <&pro_micro 16 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> 
            , <&pro_micro 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;

        col-gpios
            = <&pro_micro 7 GPIO_ACTIVE_HIGH>
            , <&pro_micro 6 GPIO_ACTIVE_HIGH>
            , <&pro_micro 5 GPIO_ACTIVE_HIGH>
            , <&shift_reg 0 GPIO_ACTIVE_HIGH>
            ;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <4>;
        rows = <3>;
        map = <
            RC(0,0) RC(0,1) RC(0,2)
            RC(1,0) RC(1,1) RC(1,2)
            RC(2,0) RC(2,1) RC(2,2)
            RC(0,3)
        >;
    };
};

&pinctrl {
    pro_micro_i2c_default: pro_micro_i2c_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 29)>,
                    <NRF_PSEL(TWIM_SCL, 0, 31)>;
        };
    };

    pro_micro_i2c_sleep: pro_micro_i2c_sleep {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 29)>,
                    <NRF_PSEL(TWIM_SCL, 0, 31)>;
            low-power-enable;
        };
    };

    spi1_default: spi1_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 6)>,    // Clock
                    <NRF_PSEL(SPIM_MOSI, 0, 8)>;   // Data
        };
    };

    spi1_sleep: spi1_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 6)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 8)>;
            low-power-enable;
        };
    };
};

&pro_micro_i2c {
    status = "okay";
    pinctrl-0 = <&pro_micro_i2c_default>;
    pinctrl-1 = <&pro_micro_i2c_sleep>;
    pinctrl-names = "default", "sleep";

    oled: ssd1306@3c {
        compatible = "solomon,ssd1306fb";
        reg = <0x3c>;
        width = <128>;
        height = <32>;
        segment-offset = <0>;
        page-offset = <0>;
        display-offset = <0>;
        multiplex-ratio = <31>;
        segment-remap;
        com-invdir;
        com-sequential;
        inversion-on;
        prechargep = <0x22>;
    };
};

board_spi: &spi1 {
    status = "okay";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi1_default>;
    pinctrl-1 = <&spi1_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&pro_micro 10 GPIO_ACTIVE_LOW>;

    shift_reg: 595@0 {
        compatible = "zmk,gpio-595";
        status = "okay";
        gpio-controller;
        spi-max-frequency = <2000000>;
        #gpio-cells = <2>;
        reg = <0>;
        ngpios = <8>;
    };
};